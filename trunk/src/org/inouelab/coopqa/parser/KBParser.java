
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jul 26 16:26:47 JST 2011
//----------------------------------------------------

package org.inouelab.coopqa.parser;

import org.inouelab.coopqa.base.*;

import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jul 26 16:26:47 JST 2011
  */
public class KBParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public KBParser() {super();}

  /** Constructor which sets the default scanner. */
  public KBParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public KBParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\011\003\000\002\002\004\000\002\011" +
    "\003\000\002\011\003\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\006\005\000\002\006\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\007\005\000\002\007\005\000\002\005" +
    "\003\000\002\005\004\000\002\004\004\000\002\003\005" +
    "\000\002\002\003\000\002\002\003\000\002\002\005\000" +
    "\002\002\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\006\006\006\013\013\001\002\000\014\002" +
    "\001\004\001\005\033\011\045\012\044\001\002\000\006" +
    "\002\040\004\037\001\002\000\004\013\013\001\002\000" +
    "\006\005\027\012\030\001\002\000\010\002\uffff\004\uffff" +
    "\011\025\001\002\000\006\002\ufffe\004\ufffe\001\002\000" +
    "\014\002\ufff2\004\ufff2\005\ufff2\011\ufff2\012\ufff2\001\002" +
    "\000\004\007\015\001\002\000\014\002\ufff0\004\ufff0\005" +
    "\ufff0\011\ufff0\012\ufff0\001\002\000\006\013\020\014\017" +
    "\001\002\000\006\004\021\010\022\001\002\000\006\004" +
    "\uffed\010\uffed\001\002\000\006\004\uffee\010\uffee\001\002" +
    "\000\006\013\024\014\023\001\002\000\014\002\uffef\004" +
    "\uffef\005\uffef\011\uffef\012\uffef\001\002\000\006\004\uffeb" +
    "\010\uffeb\001\002\000\006\004\uffec\010\uffec\001\002\000" +
    "\006\006\006\013\013\001\002\000\010\002\ufff9\004\ufff9" +
    "\011\ufff9\001\002\000\006\006\006\013\013\001\002\000" +
    "\006\006\006\013\013\001\002\000\010\002\ufff5\004\ufff5" +
    "\005\033\001\002\000\010\002\ufff8\004\ufff8\005\027\001" +
    "\002\000\006\006\006\013\013\001\002\000\012\002\ufff4" +
    "\004\ufff4\005\ufff4\012\ufff4\001\002\000\012\002\ufff3\004" +
    "\ufff3\005\ufff3\012\ufff3\001\002\000\014\002\ufff1\004\ufff1" +
    "\005\ufff1\011\ufff1\012\ufff1\001\002\000\006\006\006\013" +
    "\013\001\002\000\004\002\000\001\002\000\014\002\ufffd" +
    "\004\ufffd\005\033\011\045\012\044\001\002\000\006\002" +
    "\ufffb\004\ufffb\001\002\000\010\002\ufffc\004\ufffc\011\025" +
    "\001\002\000\006\006\006\013\013\001\002\000\006\006" +
    "\006\013\013\001\002\000\010\002\ufffa\004\ufffa\011\ufffa" +
    "\001\002\000\010\002\ufff7\004\ufff7\005\033\001\002\000" +
    "\010\002\ufff6\004\ufff6\005\027\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\016\004\011\005\003\006\007\007\006\010" +
    "\010\011\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\013" +
    "\001\001\000\002\001\001\000\004\002\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\011\005\025\001\001\000\002\001\001" +
    "\000\006\004\011\005\034\001\001\000\010\004\011\005" +
    "\030\007\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\011\005\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\011\005\040" +
    "\006\042\007\006\010\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\011\005\046\007\047\001\001\000\006\004\011\005" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$KBParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$KBParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$KBParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private CoopQAJob job;
	public KBParser (java.io.Reader input, CoopQAJob job) {
		super(new KBScanner(input));
		this.job = job;
	}
	
	public CoopQAJob getJob() {
		return job;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$KBParser$actions {
  private final KBParser parser;

  /** Constructor */
  CUP$KBParser$actions(KBParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$KBParser$do_action(
    int                        CUP$KBParser$act_num,
    java_cup.runtime.lr_parser CUP$KBParser$parser,
    java.util.Stack            CUP$KBParser$stack,
    int                        CUP$KBParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$KBParser$result;

      /* select the action based on the action number */
      switch (CUP$KBParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tuple ::= tuple COMMA VARIABLE 
            {
              Vector<Integer> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).right;
		Vector<Integer> t = (Vector<Integer>)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 t.add(parser.getJob().symTab().addSymbol(str, SymType.VARIABLE));RESULT=t; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("tuple",0, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tuple ::= tuple COMMA NONVAR 
            {
              Vector<Integer> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).right;
		Vector<Integer> t = (Vector<Integer>)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 t.add(parser.getJob().symTab().addSymbol(str, SymType.CONSTANT));RESULT=t; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("tuple",0, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tuple ::= VARIABLE 
            {
              Vector<Integer> RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 Vector<Integer> tup = new Vector<Integer>(); tup.add(parser.getJob().symTab().addSymbol(str, SymType.VARIABLE)); RESULT=tup; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("tuple",0, ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tuple ::= NONVAR 
            {
              Vector<Integer> RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 Vector<Integer> tup = new Vector<Integer>(); tup.add(parser.getJob().symTab().addSymbol(str, SymType.CONSTANT)); RESULT=tup; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("tuple",0, ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // closedTuple ::= LPAREN tuple RPAREN 
            {
              Vector<Integer> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-1)).right;
		Vector<Integer> t = (Vector<Integer>)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-1)).value;
		 RESULT=t; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("closedTuple",1, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // basic_literal ::= NONVAR closedTuple 
            {
              Literal RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-1)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-1)).right;
		String pred = (String)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Vector<Integer> t = (Vector<Integer>)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 Literal l = new Literal(parser.getJob()); l.setID(parser.getJob().symTab().addSymbol(pred, SymType.PREDICATE)); l.setNegative(false); l.setMultiParams(t); RESULT=l; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("basic_literal",2, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-1)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= NEG basic_literal 
            {
              Literal RESULT =null;
		int negLitleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int negLitright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Literal negLit = (Literal)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 negLit.setNegative(true); RESULT=negLit; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("literal",3, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-1)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal ::= basic_literal 
            {
              Literal RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 RESULT=l; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("literal",3, ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ruleSide ::= ruleSide AND literal 
            {
              Vector<Literal> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).right;
		Vector<Literal> s = (Vector<Literal>)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 s.add(l); RESULT=s; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("ruleSide",5, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ruleSide ::= literal AND literal 
            {
              Vector<Literal> RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).right;
		Literal l1 = (Literal)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Literal l2 = (Literal)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 Vector<Literal> s = new Vector<Literal>(); s.add(l1); s.add(l2); RESULT=s; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("ruleSide",5, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // rule ::= ruleSide IMPLY literal 
            {
              Rule RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).right;
		Vector<Literal> l = (Vector<Literal>)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Literal r = (Literal)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 Rule rule = new Rule(l, null); rule.addRight(r); RESULT=rule; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("rule",6, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // rule ::= literal IMPLY ruleSide 
            {
              Rule RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Vector<Literal> r = (Vector<Literal>)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 Rule rule = new Rule(null, r); rule.addLeft(l); RESULT=rule; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("rule",6, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // rule ::= literal IMPLY literal 
            {
              Rule RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Literal r = (Literal)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 Rule rule = new Rule(); rule.addRight(r); rule.addLeft(l); RESULT=rule; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("rule",6, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // rule ::= ruleSide IMPLY ruleSide 
            {
              Rule RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).right;
		Vector<Literal> l = (Vector<Literal>)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Vector<Literal> r = (Vector<Literal>)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 Rule rule = new Rule(l, r); RESULT=rule; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("rule",6, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // clause ::= clause OR literal 
            {
              Clause RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).right;
		Clause c = (Clause)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 c.add(l); RESULT=c; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("clause",4, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // clause ::= literal OR literal 
            {
              Clause RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).right;
		Literal l1 = (Literal)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Literal l2 = (Literal)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 Clause c = new Clause(); c.add(l1); c.add(l2); RESULT=c; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("clause",4, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // kb ::= kb COMMA rule 
            {
              KnowledgeBase RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).right;
		KnowledgeBase k = (KnowledgeBase)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Rule r = (Rule)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
			k.add(r); RESULT=k; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("kb",7, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // kb ::= kb COMMA clause 
            {
              KnowledgeBase RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).right;
		KnowledgeBase k = (KnowledgeBase)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Clause c = (Clause)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
			k.add(c); RESULT=k; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("kb",7, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // kb ::= kb COMMA literal 
            {
              KnowledgeBase RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).right;
		KnowledgeBase k = (KnowledgeBase)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
			 Clause c = new Clause(); c.add(l); k.add(c); RESULT=k; 
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("kb",7, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-2)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // kb ::= rule 
            {
              KnowledgeBase RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Rule r = (Rule)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
			KnowledgeBase k = new KnowledgeBase();
				k.add(r); RESULT=k;
			
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("kb",7, ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // kb ::= clause 
            {
              KnowledgeBase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Clause c = (Clause)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
			KnowledgeBase k = new KnowledgeBase();
				k.add(c); RESULT=k;
			
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("kb",7, ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= kb EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-1)).right;
		KnowledgeBase start_val = (KnowledgeBase)((java_cup.runtime.Symbol) CUP$KBParser$stack.elementAt(CUP$KBParser$top-1)).value;
		RESULT = start_val;
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$KBParser$stack.elementAt(CUP$KBParser$top-1)), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$KBParser$parser.done_parsing();
          return CUP$KBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // kb ::= literal 
            {
              KnowledgeBase RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$KBParser$stack.peek()).value;
		 Clause c = new Clause(); c.add(l); 
				KnowledgeBase k = new KnowledgeBase();
				k.add(c); RESULT=k; 
			
              CUP$KBParser$result = parser.getSymbolFactory().newSymbol("kb",7, ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$KBParser$stack.peek()), RESULT);
            }
          return CUP$KBParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

